/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InventoryUnit as PrismaInventoryUnit,
  Component as PrismaComponent,
  Disposition as PrismaDisposition,
  Expense as PrismaExpense,
  StorageLocation as PrismaStorageLocation,
} from "@prisma/client";

export class InventoryUnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InventoryUnitCountArgs, "select">
  ): Promise<number> {
    return this.prisma.inventoryUnit.count(args);
  }

  async inventoryUnits(
    args: Prisma.InventoryUnitFindManyArgs
  ): Promise<PrismaInventoryUnit[]> {
    return this.prisma.inventoryUnit.findMany(args);
  }
  async inventoryUnit(
    args: Prisma.InventoryUnitFindUniqueArgs
  ): Promise<PrismaInventoryUnit | null> {
    return this.prisma.inventoryUnit.findUnique(args);
  }
  async createInventoryUnit(
    args: Prisma.InventoryUnitCreateArgs
  ): Promise<PrismaInventoryUnit> {
    return this.prisma.inventoryUnit.create(args);
  }
  async updateInventoryUnit(
    args: Prisma.InventoryUnitUpdateArgs
  ): Promise<PrismaInventoryUnit> {
    return this.prisma.inventoryUnit.update(args);
  }
  async deleteInventoryUnit(
    args: Prisma.InventoryUnitDeleteArgs
  ): Promise<PrismaInventoryUnit> {
    return this.prisma.inventoryUnit.delete(args);
  }

  async getComponent(parentId: string): Promise<PrismaComponent | null> {
    return this.prisma.inventoryUnit
      .findUnique({
        where: { id: parentId },
      })
      .component();
  }

  async getDisposition(parentId: string): Promise<PrismaDisposition | null> {
    return this.prisma.inventoryUnit
      .findUnique({
        where: { id: parentId },
      })
      .disposition();
  }

  async getExpense(parentId: string): Promise<PrismaExpense | null> {
    return this.prisma.inventoryUnit
      .findUnique({
        where: { id: parentId },
      })
      .expense();
  }

  async getStorageLocation(
    parentId: string
  ): Promise<PrismaStorageLocation | null> {
    return this.prisma.inventoryUnit
      .findUnique({
        where: { id: parentId },
      })
      .storageLocation();
  }
}
