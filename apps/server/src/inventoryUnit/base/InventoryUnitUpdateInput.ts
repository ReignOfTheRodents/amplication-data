/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsOptional,
  ValidateNested,
  IsEnum,
  IsString,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { ComponentWhereUniqueInput } from "../../component/base/ComponentWhereUniqueInput";
import { EnumInventoryUnitCondition } from "./EnumInventoryUnitCondition";
import { DispositionWhereUniqueInput } from "../../disposition/base/DispositionWhereUniqueInput";
import { ExpenseWhereUniqueInput } from "../../expense/base/ExpenseWhereUniqueInput";
import { StorageLocationWhereUniqueInput } from "../../storageLocation/base/StorageLocationWhereUniqueInput";
import { EnumInventoryUnitUse } from "./EnumInventoryUnitUse";

@InputType()
class InventoryUnitUpdateInput {
  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  acquisitionDate?: Date;

  @ApiProperty({
    required: false,
    type: () => ComponentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ComponentWhereUniqueInput)
  @IsOptional()
  @Field(() => ComponentWhereUniqueInput, {
    nullable: true,
  })
  component?: ComponentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    enum: EnumInventoryUnitCondition,
  })
  @IsEnum(EnumInventoryUnitCondition)
  @IsOptional()
  @Field(() => EnumInventoryUnitCondition, {
    nullable: true,
  })
  condition?: "New" | "Excellent" | "Good" | "Worn" | "Damaged" | "Unusable";

  @ApiProperty({
    required: false,
    type: () => DispositionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DispositionWhereUniqueInput)
  @IsOptional()
  @Field(() => DispositionWhereUniqueInput, {
    nullable: true,
  })
  disposition?: DispositionWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ExpenseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ExpenseWhereUniqueInput)
  @IsOptional()
  @Field(() => ExpenseWhereUniqueInput, {
    nullable: true,
  })
  expense?: ExpenseWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notes?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  serialNumber?: string;

  @ApiProperty({
    required: false,
    type: () => StorageLocationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StorageLocationWhereUniqueInput)
  @IsOptional()
  @Field(() => StorageLocationWhereUniqueInput, {
    nullable: true,
  })
  storageLocation?: StorageLocationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    enum: EnumInventoryUnitUse,
  })
  @IsEnum(EnumInventoryUnitUse)
  @IsOptional()
  @Field(() => EnumInventoryUnitUse, {
    nullable: true,
  })
  use?: "Active" | "Spare" | "Display" | "Other" | "Inactive";
}

export { InventoryUnitUpdateInput as InventoryUnitUpdateInput };
