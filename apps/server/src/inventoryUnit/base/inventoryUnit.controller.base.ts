/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { InventoryUnitService } from "../inventoryUnit.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { InventoryUnitCreateInput } from "./InventoryUnitCreateInput";
import { InventoryUnit } from "./InventoryUnit";
import { InventoryUnitFindManyArgs } from "./InventoryUnitFindManyArgs";
import { InventoryUnitWhereUniqueInput } from "./InventoryUnitWhereUniqueInput";
import { InventoryUnitUpdateInput } from "./InventoryUnitUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class InventoryUnitControllerBase {
  constructor(
    protected readonly service: InventoryUnitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InventoryUnit })
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createInventoryUnit(
    @common.Body() data: InventoryUnitCreateInput
  ): Promise<InventoryUnit> {
    return await this.service.createInventoryUnit({
      data: {
        ...data,

        component: data.component
          ? {
              connect: data.component,
            }
          : undefined,

        disposition: data.disposition
          ? {
              connect: data.disposition,
            }
          : undefined,

        expense: data.expense
          ? {
              connect: data.expense,
            }
          : undefined,

        storageLocation: data.storageLocation
          ? {
              connect: data.storageLocation,
            }
          : undefined,
      },
      select: {
        acquisitionDate: true,

        component: {
          select: {
            id: true,
          },
        },

        condition: true,
        createdAt: true,

        disposition: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        id: true,
        notes: true,
        serialNumber: true,

        storageLocation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        use: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [InventoryUnit] })
  @ApiNestedQuery(InventoryUnitFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async inventoryUnits(
    @common.Req() request: Request
  ): Promise<InventoryUnit[]> {
    const args = plainToClass(InventoryUnitFindManyArgs, request.query);
    return this.service.inventoryUnits({
      ...args,
      select: {
        acquisitionDate: true,

        component: {
          select: {
            id: true,
          },
        },

        condition: true,
        createdAt: true,

        disposition: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        id: true,
        notes: true,
        serialNumber: true,

        storageLocation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        use: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InventoryUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async inventoryUnit(
    @common.Param() params: InventoryUnitWhereUniqueInput
  ): Promise<InventoryUnit | null> {
    const result = await this.service.inventoryUnit({
      where: params,
      select: {
        acquisitionDate: true,

        component: {
          select: {
            id: true,
          },
        },

        condition: true,
        createdAt: true,

        disposition: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        id: true,
        notes: true,
        serialNumber: true,

        storageLocation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        use: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InventoryUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateInventoryUnit(
    @common.Param() params: InventoryUnitWhereUniqueInput,
    @common.Body() data: InventoryUnitUpdateInput
  ): Promise<InventoryUnit | null> {
    try {
      return await this.service.updateInventoryUnit({
        where: params,
        data: {
          ...data,

          component: data.component
            ? {
                connect: data.component,
              }
            : undefined,

          disposition: data.disposition
            ? {
                connect: data.disposition,
              }
            : undefined,

          expense: data.expense
            ? {
                connect: data.expense,
              }
            : undefined,

          storageLocation: data.storageLocation
            ? {
                connect: data.storageLocation,
              }
            : undefined,
        },
        select: {
          acquisitionDate: true,

          component: {
            select: {
              id: true,
            },
          },

          condition: true,
          createdAt: true,

          disposition: {
            select: {
              id: true,
            },
          },

          expense: {
            select: {
              id: true,
            },
          },

          id: true,
          notes: true,
          serialNumber: true,

          storageLocation: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          use: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InventoryUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteInventoryUnit(
    @common.Param() params: InventoryUnitWhereUniqueInput
  ): Promise<InventoryUnit | null> {
    try {
      return await this.service.deleteInventoryUnit({
        where: params,
        select: {
          acquisitionDate: true,

          component: {
            select: {
              id: true,
            },
          },

          condition: true,
          createdAt: true,

          disposition: {
            select: {
              id: true,
            },
          },

          expense: {
            select: {
              id: true,
            },
          },

          id: true,
          notes: true,
          serialNumber: true,

          storageLocation: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          use: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
