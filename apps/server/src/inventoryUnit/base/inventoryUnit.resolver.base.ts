/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InventoryUnit } from "./InventoryUnit";
import { InventoryUnitCountArgs } from "./InventoryUnitCountArgs";
import { InventoryUnitFindManyArgs } from "./InventoryUnitFindManyArgs";
import { InventoryUnitFindUniqueArgs } from "./InventoryUnitFindUniqueArgs";
import { CreateInventoryUnitArgs } from "./CreateInventoryUnitArgs";
import { UpdateInventoryUnitArgs } from "./UpdateInventoryUnitArgs";
import { DeleteInventoryUnitArgs } from "./DeleteInventoryUnitArgs";
import { Component } from "../../component/base/Component";
import { Disposition } from "../../disposition/base/Disposition";
import { Expense } from "../../expense/base/Expense";
import { StorageLocation } from "../../storageLocation/base/StorageLocation";
import { InventoryUnitService } from "../inventoryUnit.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InventoryUnit)
export class InventoryUnitResolverBase {
  constructor(
    protected readonly service: InventoryUnitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "read",
    possession: "any",
  })
  async _inventoryUnitsMeta(
    @graphql.Args() args: InventoryUnitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InventoryUnit])
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "read",
    possession: "any",
  })
  async inventoryUnits(
    @graphql.Args() args: InventoryUnitFindManyArgs
  ): Promise<InventoryUnit[]> {
    return this.service.inventoryUnits(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InventoryUnit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "read",
    possession: "own",
  })
  async inventoryUnit(
    @graphql.Args() args: InventoryUnitFindUniqueArgs
  ): Promise<InventoryUnit | null> {
    const result = await this.service.inventoryUnit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InventoryUnit)
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "create",
    possession: "any",
  })
  async createInventoryUnit(
    @graphql.Args() args: CreateInventoryUnitArgs
  ): Promise<InventoryUnit> {
    return await this.service.createInventoryUnit({
      ...args,
      data: {
        ...args.data,

        component: args.data.component
          ? {
              connect: args.data.component,
            }
          : undefined,

        disposition: args.data.disposition
          ? {
              connect: args.data.disposition,
            }
          : undefined,

        expense: args.data.expense
          ? {
              connect: args.data.expense,
            }
          : undefined,

        storageLocation: args.data.storageLocation
          ? {
              connect: args.data.storageLocation,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InventoryUnit)
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "update",
    possession: "any",
  })
  async updateInventoryUnit(
    @graphql.Args() args: UpdateInventoryUnitArgs
  ): Promise<InventoryUnit | null> {
    try {
      return await this.service.updateInventoryUnit({
        ...args,
        data: {
          ...args.data,

          component: args.data.component
            ? {
                connect: args.data.component,
              }
            : undefined,

          disposition: args.data.disposition
            ? {
                connect: args.data.disposition,
              }
            : undefined,

          expense: args.data.expense
            ? {
                connect: args.data.expense,
              }
            : undefined,

          storageLocation: args.data.storageLocation
            ? {
                connect: args.data.storageLocation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InventoryUnit)
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "delete",
    possession: "any",
  })
  async deleteInventoryUnit(
    @graphql.Args() args: DeleteInventoryUnitArgs
  ): Promise<InventoryUnit | null> {
    try {
      return await this.service.deleteInventoryUnit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Component, {
    nullable: true,
    name: "component",
  })
  @nestAccessControl.UseRoles({
    resource: "Component",
    action: "read",
    possession: "any",
  })
  async getComponent(
    @graphql.Parent() parent: InventoryUnit
  ): Promise<Component | null> {
    const result = await this.service.getComponent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Disposition, {
    nullable: true,
    name: "disposition",
  })
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "read",
    possession: "any",
  })
  async getDisposition(
    @graphql.Parent() parent: InventoryUnit
  ): Promise<Disposition | null> {
    const result = await this.service.getDisposition(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Expense, {
    nullable: true,
    name: "expense",
  })
  @nestAccessControl.UseRoles({
    resource: "Expense",
    action: "read",
    possession: "any",
  })
  async getExpense(
    @graphql.Parent() parent: InventoryUnit
  ): Promise<Expense | null> {
    const result = await this.service.getExpense(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => StorageLocation, {
    nullable: true,
    name: "storageLocation",
  })
  @nestAccessControl.UseRoles({
    resource: "StorageLocation",
    action: "read",
    possession: "any",
  })
  async getStorageLocation(
    @graphql.Parent() parent: InventoryUnit
  ): Promise<StorageLocation | null> {
    const result = await this.service.getStorageLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
