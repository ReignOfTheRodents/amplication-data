/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DispositionService } from "../disposition.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DispositionCreateInput } from "./DispositionCreateInput";
import { Disposition } from "./Disposition";
import { DispositionFindManyArgs } from "./DispositionFindManyArgs";
import { DispositionWhereUniqueInput } from "./DispositionWhereUniqueInput";
import { DispositionUpdateInput } from "./DispositionUpdateInput";
import { InventoryUnitFindManyArgs } from "../../inventoryUnit/base/InventoryUnitFindManyArgs";
import { InventoryUnit } from "../../inventoryUnit/base/InventoryUnit";
import { InventoryUnitWhereUniqueInput } from "../../inventoryUnit/base/InventoryUnitWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DispositionControllerBase {
  constructor(
    protected readonly service: DispositionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Disposition })
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDisposition(
    @common.Body() data: DispositionCreateInput
  ): Promise<Disposition> {
    return await this.service.createDisposition({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        entity: true,
        id: true,
        method: true,
        notes: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Disposition] })
  @ApiNestedQuery(DispositionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async dispositions(@common.Req() request: Request): Promise<Disposition[]> {
    const args = plainToClass(DispositionFindManyArgs, request.query);
    return this.service.dispositions({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        entity: true,
        id: true,
        method: true,
        notes: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Disposition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async disposition(
    @common.Param() params: DispositionWhereUniqueInput
  ): Promise<Disposition | null> {
    const result = await this.service.disposition({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        entity: true,
        id: true,
        method: true,
        notes: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Disposition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDisposition(
    @common.Param() params: DispositionWhereUniqueInput,
    @common.Body() data: DispositionUpdateInput
  ): Promise<Disposition | null> {
    try {
      return await this.service.updateDisposition({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          entity: true,
          id: true,
          method: true,
          notes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Disposition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDisposition(
    @common.Param() params: DispositionWhereUniqueInput
  ): Promise<Disposition | null> {
    try {
      return await this.service.deleteDisposition({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          entity: true,
          id: true,
          method: true,
          notes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/inventoryUnits")
  @ApiNestedQuery(InventoryUnitFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "read",
    possession: "any",
  })
  async findInventoryUnits(
    @common.Req() request: Request,
    @common.Param() params: DispositionWhereUniqueInput
  ): Promise<InventoryUnit[]> {
    const query = plainToClass(InventoryUnitFindManyArgs, request.query);
    const results = await this.service.findInventoryUnits(params.id, {
      ...query,
      select: {
        acquisitionDate: true,

        component: {
          select: {
            id: true,
          },
        },

        condition: true,
        createdAt: true,

        disposition: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        id: true,
        notes: true,
        serialNumber: true,

        storageLocation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        use: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inventoryUnits")
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "update",
    possession: "any",
  })
  async connectInventoryUnits(
    @common.Param() params: DispositionWhereUniqueInput,
    @common.Body() body: InventoryUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventoryUnits: {
        connect: body,
      },
    };
    await this.service.updateDisposition({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inventoryUnits")
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "update",
    possession: "any",
  })
  async updateInventoryUnits(
    @common.Param() params: DispositionWhereUniqueInput,
    @common.Body() body: InventoryUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventoryUnits: {
        set: body,
      },
    };
    await this.service.updateDisposition({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inventoryUnits")
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "update",
    possession: "any",
  })
  async disconnectInventoryUnits(
    @common.Param() params: DispositionWhereUniqueInput,
    @common.Body() body: InventoryUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventoryUnits: {
        disconnect: body,
      },
    };
    await this.service.updateDisposition({
      where: params,
      data,
      select: { id: true },
    });
  }
}
