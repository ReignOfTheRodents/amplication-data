/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Disposition } from "./Disposition";
import { DispositionCountArgs } from "./DispositionCountArgs";
import { DispositionFindManyArgs } from "./DispositionFindManyArgs";
import { DispositionFindUniqueArgs } from "./DispositionFindUniqueArgs";
import { CreateDispositionArgs } from "./CreateDispositionArgs";
import { UpdateDispositionArgs } from "./UpdateDispositionArgs";
import { DeleteDispositionArgs } from "./DeleteDispositionArgs";
import { InventoryUnitFindManyArgs } from "../../inventoryUnit/base/InventoryUnitFindManyArgs";
import { InventoryUnit } from "../../inventoryUnit/base/InventoryUnit";
import { DispositionService } from "../disposition.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Disposition)
export class DispositionResolverBase {
  constructor(
    protected readonly service: DispositionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "read",
    possession: "any",
  })
  async _dispositionsMeta(
    @graphql.Args() args: DispositionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Disposition])
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "read",
    possession: "any",
  })
  async dispositions(
    @graphql.Args() args: DispositionFindManyArgs
  ): Promise<Disposition[]> {
    return this.service.dispositions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Disposition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "read",
    possession: "own",
  })
  async disposition(
    @graphql.Args() args: DispositionFindUniqueArgs
  ): Promise<Disposition | null> {
    const result = await this.service.disposition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Disposition)
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "create",
    possession: "any",
  })
  async createDisposition(
    @graphql.Args() args: CreateDispositionArgs
  ): Promise<Disposition> {
    return await this.service.createDisposition({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Disposition)
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "update",
    possession: "any",
  })
  async updateDisposition(
    @graphql.Args() args: UpdateDispositionArgs
  ): Promise<Disposition | null> {
    try {
      return await this.service.updateDisposition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Disposition)
  @nestAccessControl.UseRoles({
    resource: "Disposition",
    action: "delete",
    possession: "any",
  })
  async deleteDisposition(
    @graphql.Args() args: DeleteDispositionArgs
  ): Promise<Disposition | null> {
    try {
      return await this.service.deleteDisposition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [InventoryUnit], { name: "inventoryUnits" })
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "read",
    possession: "any",
  })
  async findInventoryUnits(
    @graphql.Parent() parent: Disposition,
    @graphql.Args() args: InventoryUnitFindManyArgs
  ): Promise<InventoryUnit[]> {
    const results = await this.service.findInventoryUnits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
