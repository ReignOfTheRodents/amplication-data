/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StorageLocation as PrismaStorageLocation,
  InventoryUnit as PrismaInventoryUnit,
} from "@prisma/client";

export class StorageLocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StorageLocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storageLocation.count(args);
  }

  async storageLocations(
    args: Prisma.StorageLocationFindManyArgs
  ): Promise<PrismaStorageLocation[]> {
    return this.prisma.storageLocation.findMany(args);
  }
  async storageLocation(
    args: Prisma.StorageLocationFindUniqueArgs
  ): Promise<PrismaStorageLocation | null> {
    return this.prisma.storageLocation.findUnique(args);
  }
  async createStorageLocation(
    args: Prisma.StorageLocationCreateArgs
  ): Promise<PrismaStorageLocation> {
    return this.prisma.storageLocation.create(args);
  }
  async updateStorageLocation(
    args: Prisma.StorageLocationUpdateArgs
  ): Promise<PrismaStorageLocation> {
    return this.prisma.storageLocation.update(args);
  }
  async deleteStorageLocation(
    args: Prisma.StorageLocationDeleteArgs
  ): Promise<PrismaStorageLocation> {
    return this.prisma.storageLocation.delete(args);
  }

  async findInventoryUnits(
    parentId: string,
    args: Prisma.InventoryUnitFindManyArgs
  ): Promise<PrismaInventoryUnit[]> {
    return this.prisma.storageLocation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inventoryUnits(args);
  }
}
