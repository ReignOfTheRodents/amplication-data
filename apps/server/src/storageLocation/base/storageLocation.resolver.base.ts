/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { StorageLocation } from "./StorageLocation";
import { StorageLocationCountArgs } from "./StorageLocationCountArgs";
import { StorageLocationFindManyArgs } from "./StorageLocationFindManyArgs";
import { StorageLocationFindUniqueArgs } from "./StorageLocationFindUniqueArgs";
import { CreateStorageLocationArgs } from "./CreateStorageLocationArgs";
import { UpdateStorageLocationArgs } from "./UpdateStorageLocationArgs";
import { DeleteStorageLocationArgs } from "./DeleteStorageLocationArgs";
import { InventoryUnitFindManyArgs } from "../../inventoryUnit/base/InventoryUnitFindManyArgs";
import { InventoryUnit } from "../../inventoryUnit/base/InventoryUnit";
import { StorageLocationService } from "../storageLocation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StorageLocation)
export class StorageLocationResolverBase {
  constructor(
    protected readonly service: StorageLocationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StorageLocation",
    action: "read",
    possession: "any",
  })
  async _storageLocationsMeta(
    @graphql.Args() args: StorageLocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StorageLocation])
  @nestAccessControl.UseRoles({
    resource: "StorageLocation",
    action: "read",
    possession: "any",
  })
  async storageLocations(
    @graphql.Args() args: StorageLocationFindManyArgs
  ): Promise<StorageLocation[]> {
    return this.service.storageLocations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StorageLocation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StorageLocation",
    action: "read",
    possession: "own",
  })
  async storageLocation(
    @graphql.Args() args: StorageLocationFindUniqueArgs
  ): Promise<StorageLocation | null> {
    const result = await this.service.storageLocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StorageLocation)
  @nestAccessControl.UseRoles({
    resource: "StorageLocation",
    action: "create",
    possession: "any",
  })
  async createStorageLocation(
    @graphql.Args() args: CreateStorageLocationArgs
  ): Promise<StorageLocation> {
    return await this.service.createStorageLocation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StorageLocation)
  @nestAccessControl.UseRoles({
    resource: "StorageLocation",
    action: "update",
    possession: "any",
  })
  async updateStorageLocation(
    @graphql.Args() args: UpdateStorageLocationArgs
  ): Promise<StorageLocation | null> {
    try {
      return await this.service.updateStorageLocation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StorageLocation)
  @nestAccessControl.UseRoles({
    resource: "StorageLocation",
    action: "delete",
    possession: "any",
  })
  async deleteStorageLocation(
    @graphql.Args() args: DeleteStorageLocationArgs
  ): Promise<StorageLocation | null> {
    try {
      return await this.service.deleteStorageLocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [InventoryUnit], { name: "inventoryUnits" })
  @nestAccessControl.UseRoles({
    resource: "InventoryUnit",
    action: "read",
    possession: "any",
  })
  async findInventoryUnits(
    @graphql.Parent() parent: StorageLocation,
    @graphql.Args() args: InventoryUnitFindManyArgs
  ): Promise<InventoryUnit[]> {
    const results = await this.service.findInventoryUnits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
