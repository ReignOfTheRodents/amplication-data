/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { DecimalFilter } from "../../util/DecimalFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";
import { CountyWhereUniqueInput } from "../../county/base/CountyWhereUniqueInput";
import { StringFilter } from "../../util/StringFilter";
import { InventoryUnitListRelationFilter } from "../../inventoryUnit/base/InventoryUnitListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { VendorWhereUniqueInput } from "../../vendor/base/VendorWhereUniqueInput";

@InputType()
class ExpenseWhereInput {
  @ApiProperty({
    required: false,
    type: DecimalFilter,
  })
  @Type(() => DecimalFilter)
  @IsOptional()
  @Field(() => DecimalFilter, {
    nullable: true,
  })
  amount?: DecimalFilter;

  @ApiProperty({
    required: false,
    type: () => ContractWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContractWhereUniqueInput)
  @IsOptional()
  @Field(() => ContractWhereUniqueInput, {
    nullable: true,
  })
  contract?: ContractWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CountyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CountyWhereUniqueInput)
  @IsOptional()
  @Field(() => CountyWhereUniqueInput, {
    nullable: true,
  })
  county?: CountyWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  fund?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => InventoryUnitListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InventoryUnitListRelationFilter)
  @IsOptional()
  @Field(() => InventoryUnitListRelationFilter, {
    nullable: true,
  })
  inventoryUnits?: InventoryUnitListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  name?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  notes?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  owner?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => VendorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => VendorWhereUniqueInput)
  @IsOptional()
  @Field(() => VendorWhereUniqueInput, {
    nullable: true,
  })
  vendor?: VendorWhereUniqueInput;
}

export { ExpenseWhereInput as ExpenseWhereInput };
