/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ContractService } from "../contract.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ContractCreateInput } from "./ContractCreateInput";
import { Contract } from "./Contract";
import { ContractFindManyArgs } from "./ContractFindManyArgs";
import { ContractWhereUniqueInput } from "./ContractWhereUniqueInput";
import { ContractUpdateInput } from "./ContractUpdateInput";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { ExpenseWhereUniqueInput } from "../../expense/base/ExpenseWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ContractControllerBase {
  constructor(
    protected readonly service: ContractService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Contract })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createContract(
    @common.Body() data: ContractCreateInput
  ): Promise<Contract> {
    return await this.service.createContract({
      data: {
        ...data,

        certification: data.certification
          ? {
              connect: data.certification,
            }
          : undefined,
      },
      select: {
        certification: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        notes: true,
        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Contract] })
  @ApiNestedQuery(ContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contracts(@common.Req() request: Request): Promise<Contract[]> {
    const args = plainToClass(ContractFindManyArgs, request.query);
    return this.service.contracts({
      ...args,
      select: {
        certification: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        notes: true,
        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Contract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contract(
    @common.Param() params: ContractWhereUniqueInput
  ): Promise<Contract | null> {
    const result = await this.service.contract({
      where: params,
      select: {
        certification: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        notes: true,
        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Contract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateContract(
    @common.Param() params: ContractWhereUniqueInput,
    @common.Body() data: ContractUpdateInput
  ): Promise<Contract | null> {
    try {
      return await this.service.updateContract({
        where: params,
        data: {
          ...data,

          certification: data.certification
            ? {
                connect: data.certification,
              }
            : undefined,
        },
        select: {
          certification: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endDate: true,
          id: true,
          notes: true,
          startDate: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Contract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteContract(
    @common.Param() params: ContractWhereUniqueInput
  ): Promise<Contract | null> {
    try {
      return await this.service.deleteContract({
        where: params,
        select: {
          certification: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endDate: true,
          id: true,
          notes: true,
          startDate: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/expenses")
  @ApiNestedQuery(ExpenseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Expense",
    action: "read",
    possession: "any",
  })
  async findExpenses(
    @common.Req() request: Request,
    @common.Param() params: ContractWhereUniqueInput
  ): Promise<Expense[]> {
    const query = plainToClass(ExpenseFindManyArgs, request.query);
    const results = await this.service.findExpenses(params.id, {
      ...query,
      select: {
        amount: true,

        contract: {
          select: {
            id: true,
          },
        },

        county: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        fund: true,
        id: true,
        name: true,
        notes: true,
        owner: true,
        updatedAt: true,

        vendor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expenses")
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "update",
    possession: "any",
  })
  async connectExpenses(
    @common.Param() params: ContractWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenses: {
        connect: body,
      },
    };
    await this.service.updateContract({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expenses")
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "update",
    possession: "any",
  })
  async updateExpenses(
    @common.Param() params: ContractWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenses: {
        set: body,
      },
    };
    await this.service.updateContract({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expenses")
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "update",
    possession: "any",
  })
  async disconnectExpenses(
    @common.Param() params: ContractWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenses: {
        disconnect: body,
      },
    };
    await this.service.updateContract({
      where: params,
      data,
      select: { id: true },
    });
  }
}
