/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumCertificationAction } from "./EnumCertificationAction";
import {
  IsEnum,
  IsDate,
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { ComponentCreateNestedManyWithoutCertificationsInput } from "./ComponentCreateNestedManyWithoutCertificationsInput";
import { ContractCreateNestedManyWithoutCertificationsInput } from "./ContractCreateNestedManyWithoutCertificationsInput";
import { EnumCertificationSystemType } from "./EnumCertificationSystemType";
import { EnumCertificationTypeField } from "./EnumCertificationTypeField";
import { VendorWhereUniqueInput } from "../../vendor/base/VendorWhereUniqueInput";

@InputType()
class CertificationCreateInput {
  @ApiProperty({
    required: true,
    enum: EnumCertificationAction,
  })
  @IsEnum(EnumCertificationAction)
  @Field(() => EnumCertificationAction)
  action!: "Approved" | "Pending" | "Denied" | "Other";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  applicationDate!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  certificationDate!: Date;

  @ApiProperty({
    required: false,
    type: () => ComponentCreateNestedManyWithoutCertificationsInput,
  })
  @ValidateNested()
  @Type(() => ComponentCreateNestedManyWithoutCertificationsInput)
  @IsOptional()
  @Field(() => ComponentCreateNestedManyWithoutCertificationsInput, {
    nullable: true,
  })
  components?: ComponentCreateNestedManyWithoutCertificationsInput;

  @ApiProperty({
    required: false,
    type: () => ContractCreateNestedManyWithoutCertificationsInput,
  })
  @ValidateNested()
  @Type(() => ContractCreateNestedManyWithoutCertificationsInput)
  @IsOptional()
  @Field(() => ContractCreateNestedManyWithoutCertificationsInput, {
    nullable: true,
  })
  contracts?: ContractCreateNestedManyWithoutCertificationsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  description!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  expirationDate!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  federalCertDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  federalCertNumber?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  modelNumber!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notes?: string | null;

  @ApiProperty({
    required: true,
    enum: EnumCertificationSystemType,
  })
  @IsEnum(EnumCertificationSystemType)
  @Field(() => EnumCertificationSystemType)
  systemType!:
    | "Dre"
    | "OpScan"
    | "DreOpscan"
    | "PcLaptopBased"
    | "TabletBased"
    | "CustomHardwareBased"
    | "Other";

  @ApiProperty({
    required: true,
    enum: EnumCertificationTypeField,
  })
  @IsEnum(EnumCertificationTypeField)
  @Field(() => EnumCertificationTypeField)
  typeField!:
    | "Certification"
    | "Reevaluation"
    | "Renewal"
    | "Recertification"
    | "Other";

  @ApiProperty({
    required: false,
    type: () => VendorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => VendorWhereUniqueInput)
  @IsOptional()
  @Field(() => VendorWhereUniqueInput, {
    nullable: true,
  })
  vendor?: VendorWhereUniqueInput | null;
}

export { CertificationCreateInput as CertificationCreateInput };
