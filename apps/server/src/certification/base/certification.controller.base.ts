/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CertificationService } from "../certification.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CertificationCreateInput } from "./CertificationCreateInput";
import { Certification } from "./Certification";
import { CertificationFindManyArgs } from "./CertificationFindManyArgs";
import { CertificationWhereUniqueInput } from "./CertificationWhereUniqueInput";
import { CertificationUpdateInput } from "./CertificationUpdateInput";
import { ComponentFindManyArgs } from "../../component/base/ComponentFindManyArgs";
import { Component } from "../../component/base/Component";
import { ComponentWhereUniqueInput } from "../../component/base/ComponentWhereUniqueInput";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CertificationControllerBase {
  constructor(
    protected readonly service: CertificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Certification })
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCertification(
    @common.Body() data: CertificationCreateInput
  ): Promise<Certification> {
    return await this.service.createCertification({
      data: {
        ...data,

        vendor: data.vendor
          ? {
              connect: data.vendor,
            }
          : undefined,
      },
      select: {
        action: true,
        applicationDate: true,
        certificationDate: true,
        createdAt: true,
        description: true,
        expirationDate: true,
        federalCertDate: true,
        federalCertNumber: true,
        id: true,
        modelNumber: true,
        notes: true,
        systemType: true,
        typeField: true,
        updatedAt: true,

        vendor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Certification] })
  @ApiNestedQuery(CertificationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async certifications(
    @common.Req() request: Request
  ): Promise<Certification[]> {
    const args = plainToClass(CertificationFindManyArgs, request.query);
    return this.service.certifications({
      ...args,
      select: {
        action: true,
        applicationDate: true,
        certificationDate: true,
        createdAt: true,
        description: true,
        expirationDate: true,
        federalCertDate: true,
        federalCertNumber: true,
        id: true,
        modelNumber: true,
        notes: true,
        systemType: true,
        typeField: true,
        updatedAt: true,

        vendor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Certification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async certification(
    @common.Param() params: CertificationWhereUniqueInput
  ): Promise<Certification | null> {
    const result = await this.service.certification({
      where: params,
      select: {
        action: true,
        applicationDate: true,
        certificationDate: true,
        createdAt: true,
        description: true,
        expirationDate: true,
        federalCertDate: true,
        federalCertNumber: true,
        id: true,
        modelNumber: true,
        notes: true,
        systemType: true,
        typeField: true,
        updatedAt: true,

        vendor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Certification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCertification(
    @common.Param() params: CertificationWhereUniqueInput,
    @common.Body() data: CertificationUpdateInput
  ): Promise<Certification | null> {
    try {
      return await this.service.updateCertification({
        where: params,
        data: {
          ...data,

          vendor: data.vendor
            ? {
                connect: data.vendor,
              }
            : undefined,
        },
        select: {
          action: true,
          applicationDate: true,
          certificationDate: true,
          createdAt: true,
          description: true,
          expirationDate: true,
          federalCertDate: true,
          federalCertNumber: true,
          id: true,
          modelNumber: true,
          notes: true,
          systemType: true,
          typeField: true,
          updatedAt: true,

          vendor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Certification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCertification(
    @common.Param() params: CertificationWhereUniqueInput
  ): Promise<Certification | null> {
    try {
      return await this.service.deleteCertification({
        where: params,
        select: {
          action: true,
          applicationDate: true,
          certificationDate: true,
          createdAt: true,
          description: true,
          expirationDate: true,
          federalCertDate: true,
          federalCertNumber: true,
          id: true,
          modelNumber: true,
          notes: true,
          systemType: true,
          typeField: true,
          updatedAt: true,

          vendor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/components")
  @ApiNestedQuery(ComponentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Component",
    action: "read",
    possession: "any",
  })
  async findComponents(
    @common.Req() request: Request,
    @common.Param() params: CertificationWhereUniqueInput
  ): Promise<Component[]> {
    const query = plainToClass(ComponentFindManyArgs, request.query);
    const results = await this.service.findComponents(params.id, {
      ...query,
      select: {
        certification: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/components")
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "update",
    possession: "any",
  })
  async connectComponents(
    @common.Param() params: CertificationWhereUniqueInput,
    @common.Body() body: ComponentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      components: {
        connect: body,
      },
    };
    await this.service.updateCertification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/components")
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "update",
    possession: "any",
  })
  async updateComponents(
    @common.Param() params: CertificationWhereUniqueInput,
    @common.Body() body: ComponentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      components: {
        set: body,
      },
    };
    await this.service.updateCertification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/components")
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "update",
    possession: "any",
  })
  async disconnectComponents(
    @common.Param() params: CertificationWhereUniqueInput,
    @common.Body() body: ComponentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      components: {
        disconnect: body,
      },
    };
    await this.service.updateCertification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/contracts")
  @ApiNestedQuery(ContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @common.Req() request: Request,
    @common.Param() params: CertificationWhereUniqueInput
  ): Promise<Contract[]> {
    const query = plainToClass(ContractFindManyArgs, request.query);
    const results = await this.service.findContracts(params.id, {
      ...query,
      select: {
        certification: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,

        expense: {
          select: {
            id: true,
          },
        },

        id: true,
        notes: true,
        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "update",
    possession: "any",
  })
  async connectContracts(
    @common.Param() params: CertificationWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        connect: body,
      },
    };
    await this.service.updateCertification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "update",
    possession: "any",
  })
  async updateContracts(
    @common.Param() params: CertificationWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        set: body,
      },
    };
    await this.service.updateCertification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "update",
    possession: "any",
  })
  async disconnectContracts(
    @common.Param() params: CertificationWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        disconnect: body,
      },
    };
    await this.service.updateCertification({
      where: params,
      data,
      select: { id: true },
    });
  }
}
