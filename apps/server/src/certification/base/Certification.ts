/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumCertificationAction } from "./EnumCertificationAction";
import {
  IsEnum,
  IsDate,
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { Component } from "../../component/base/Component";
import { Contract } from "../../contract/base/Contract";
import { EnumCertificationSystemSubType } from "./EnumCertificationSystemSubType";
import { EnumCertificationSystemType } from "./EnumCertificationSystemType";
import { EnumCertificationTypeField } from "./EnumCertificationTypeField";
import { Vendor } from "../../vendor/base/Vendor";

@ObjectType()
class Certification {
  @ApiProperty({
    required: true,
    enum: EnumCertificationAction,
  })
  @IsEnum(EnumCertificationAction)
  @Field(() => EnumCertificationAction, {
    nullable: true,
  })
  action?: "Approved" | "Pending" | "Denied" | "Other";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  applicationDate!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  certificationDate!: Date;

  @ApiProperty({
    required: false,
    type: () => [Component],
  })
  @ValidateNested()
  @Type(() => Component)
  @IsOptional()
  components?: Array<Component>;

  @ApiProperty({
    required: false,
    type: () => [Contract],
  })
  @ValidateNested()
  @Type(() => Contract)
  @IsOptional()
  contracts?: Array<Contract>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  description!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  expirationDate!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  federalCertDate!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  federalCertNumber!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  modelNumber!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notes!: string | null;

  @ApiProperty({
    required: true,
    enum: EnumCertificationSystemSubType,
    isArray: true,
  })
  @IsEnum(EnumCertificationSystemSubType, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumCertificationSystemSubType], {
    nullable: true,
  })
  systemSubType?: Array<
    | "Dre"
    | "OpScan"
    | "PcLaptopBased"
    | "TabletBased"
    | "CustomHardwareBased"
    | "Other"
  >;

  @ApiProperty({
    required: true,
    enum: EnumCertificationSystemType,
  })
  @IsEnum(EnumCertificationSystemType)
  @Field(() => EnumCertificationSystemType, {
    nullable: true,
  })
  systemType?: "Vs" | "Epb";

  @ApiProperty({
    required: true,
    enum: EnumCertificationTypeField,
  })
  @IsEnum(EnumCertificationTypeField)
  @Field(() => EnumCertificationTypeField, {
    nullable: true,
  })
  typeField?:
    | "Certification"
    | "Reevaluation"
    | "Renewal"
    | "Recertification"
    | "Other";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Vendor,
  })
  @ValidateNested()
  @Type(() => Vendor)
  @IsOptional()
  vendor?: Vendor | null;
}

export { Certification as Certification };
