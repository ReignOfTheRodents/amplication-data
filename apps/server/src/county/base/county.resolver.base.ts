/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { County } from "./County";
import { CountyCountArgs } from "./CountyCountArgs";
import { CountyFindManyArgs } from "./CountyFindManyArgs";
import { CountyFindUniqueArgs } from "./CountyFindUniqueArgs";
import { CreateCountyArgs } from "./CreateCountyArgs";
import { UpdateCountyArgs } from "./UpdateCountyArgs";
import { DeleteCountyArgs } from "./DeleteCountyArgs";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { CountyService } from "../county.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => County)
export class CountyResolverBase {
  constructor(
    protected readonly service: CountyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "read",
    possession: "any",
  })
  async _countiesMeta(
    @graphql.Args() args: CountyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [County])
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "read",
    possession: "any",
  })
  async counties(@graphql.Args() args: CountyFindManyArgs): Promise<County[]> {
    return this.service.counties(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => County, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "read",
    possession: "own",
  })
  async county(
    @graphql.Args() args: CountyFindUniqueArgs
  ): Promise<County | null> {
    const result = await this.service.county(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => County)
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "create",
    possession: "any",
  })
  async createCounty(@graphql.Args() args: CreateCountyArgs): Promise<County> {
    return await this.service.createCounty({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => County)
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "update",
    possession: "any",
  })
  async updateCounty(
    @graphql.Args() args: UpdateCountyArgs
  ): Promise<County | null> {
    try {
      return await this.service.updateCounty({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => County)
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "delete",
    possession: "any",
  })
  async deleteCounty(
    @graphql.Args() args: DeleteCountyArgs
  ): Promise<County | null> {
    try {
      return await this.service.deleteCounty(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Expense], { name: "expenses" })
  @nestAccessControl.UseRoles({
    resource: "Expense",
    action: "read",
    possession: "any",
  })
  async findExpenses(
    @graphql.Parent() parent: County,
    @graphql.Args() args: ExpenseFindManyArgs
  ): Promise<Expense[]> {
    const results = await this.service.findExpenses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: County,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
