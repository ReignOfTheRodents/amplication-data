/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  County as PrismaCounty,
  Expense as PrismaExpense,
  User as PrismaUser,
} from "@prisma/client";

export class CountyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CountyCountArgs, "select">): Promise<number> {
    return this.prisma.county.count(args);
  }

  async counties(args: Prisma.CountyFindManyArgs): Promise<PrismaCounty[]> {
    return this.prisma.county.findMany(args);
  }
  async county(
    args: Prisma.CountyFindUniqueArgs
  ): Promise<PrismaCounty | null> {
    return this.prisma.county.findUnique(args);
  }
  async createCounty(args: Prisma.CountyCreateArgs): Promise<PrismaCounty> {
    return this.prisma.county.create(args);
  }
  async updateCounty(args: Prisma.CountyUpdateArgs): Promise<PrismaCounty> {
    return this.prisma.county.update(args);
  }
  async deleteCounty(args: Prisma.CountyDeleteArgs): Promise<PrismaCounty> {
    return this.prisma.county.delete(args);
  }

  async findExpenses(
    parentId: string,
    args: Prisma.ExpenseFindManyArgs
  ): Promise<PrismaExpense[]> {
    return this.prisma.county
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expenses(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.county
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
